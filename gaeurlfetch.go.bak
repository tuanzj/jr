package jr

import (
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"google.golang.org/appengine"
	"google.golang.org/appengine/urlfetch"
)

type GAEURLFetch struct {
	ctx *Context
}

func (uf *GAEURLFetch) Get(urlString string, parameters map[string]string, headers ...map[string]string) (string, error) {

	client := &http.Client{
		Transport: &urlfetch.Transport{
			Context: uf.ctx.ctx,
			AllowInvalidServerCertificate: appengine.IsDevAppServer(),
		},
	}

	// client := urlfetch.Client(uf.ctx.ctx)

	params := url.Values{}
	for k, v := range parameters {
		params.Add(k, v)
	}
	urlString += "?" + params.Encode()

	resp, err := client.Get(urlString)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	data, err := ioutil.ReadAll(resp.Body) //<--- here!
	if err != nil {
		return "", err
	}
	return string(data), nil
}

//bytes.NewBufferString(data.Encode())

func (uf *GAEURLFetch) Post(urlString string, body string, headers ...map[string]string) (string, error) {

	// bodyString := ""
	// for k, v := range body {
	// 	bodyString += k + "=" + v
	// }

	reader := strings.NewReader(body)

	client := &http.Client{
		Transport: &urlfetch.Transport{
			Context: uf.ctx.ctx,
			AllowInvalidServerCertificate: appengine.IsDevAppServer(),
		},
	}

	// client := urlfetch.Client(uf.ctx.ctx)
	contentType := ""
	// if _, ok := headers["Content-Type"]; ok {
	// contentType = headers["Content-Type"]
	// }
	resp, err := client.Post(urlString, contentType, reader)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	data, err := ioutil.ReadAll(resp.Body) //<--- here!
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (uf *GAEURLFetch) URLString(urlString string, parameters map[string]string) string {
	params := url.Values{}
	for k, v := range parameters {
		params.Add(k, v)
	}
	urlString += "?" + params.Encode()
	return urlString
}
